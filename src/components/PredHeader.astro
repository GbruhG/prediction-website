---
// src/components/LeagueHeader.astro
const { sortedPredictions, activeLeague = "all" } = Astro.props;

// Get unique leagues for the filter
const leagues = ["all", ...new Set(sortedPredictions.map(pred => pred.league))].sort();

// Get league count for each category
const leagueCounts = {};
leagues.forEach(league => {
  if (league === "all") {
    leagueCounts[league] = sortedPredictions.length;
  } else {
    leagueCounts[league] = sortedPredictions.filter(pred => pred.league === league).length;
  }
});

// League icons mapping (you can replace these with actual league logos)
const leagueIcons = {
  "all": "🌍",
  "Premier League": "🏴󠁧󠁢󠁥󠁮󠁧󠁿",
  "La Liga": "🇪🇸",
  "Serie A": "🇮🇹",
  "Bundesliga": "🇩🇪",
  "Ligue 1": "🇫🇷",
  "MLS": "🇺🇸",
  "Eredivisie": "🇳🇱",
  "Primeira Liga": "🇵🇹",
  // Add more leagues as needed
};

// Default emoji for leagues without specific icons
const defaultIcon = "⚽";
---

<div id="leagueHeaderWrapper" class="sticky top-0 z-30 w-full bg-slate-900/95 backdrop-blur-xl border-b border-slate-700/50 shadow-lg shadow-slate-900/20">
  <div class="max-w-7xl mx-auto">
    <div class="p-4">
      <h2 class="text-xl font-bold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-indigo-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="10"></circle>
          <path d="M12 8V12L14 14"></path>
        </svg>
        Match Predictions
      </h2>
      
      <!-- League filter pills on desktop -->
      <div class="hidden md:flex md:flex-wrap md:gap-2 mb-1">
        {leagues.map(league => (
          <button
            data-league={league}
            class={`league-filter-btn relative flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium transition-all duration-300 ${
              league === activeLeague 
                ? 'bg-gradient-to-r from-indigo-600 to-purple-600 text-white shadow-md shadow-indigo-500/20' 
                : 'bg-slate-800/80 text-slate-300 hover:bg-slate-700/80'
            }`}
          >
            <span class="league-icon">{leagueIcons[league] || defaultIcon}</span>
            <span>{league === "all" ? "All Leagues" : league}</span>
            <span class="ml-1.5 px-1.5 py-0.5 text-xs rounded-full bg-slate-700/50">
              {leagueCounts[league]}
            </span>
            {league === activeLeague && (
              <span class="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-1.5 h-1.5 rounded-full bg-white"></span>
            )}
          </button>
        ))}
      </div>
      
      <!-- Scrollable league tabs for mobile -->
      <div class="md:hidden overflow-x-auto py-1 scrollbar-hide">
        <div class="flex gap-2 pb-1 min-w-max">
          {leagues.map(league => (
            <button
              data-league={league}
              class={`league-filter-btn whitespace-nowrap flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium transition-all duration-300 ${
                league === activeLeague 
                  ? 'bg-gradient-to-r from-indigo-600 to-purple-600 text-white shadow-md shadow-indigo-500/20' 
                  : 'bg-slate-800/80 text-slate-300 hover:bg-slate-700/80'
              }`}
            >
              <span class="league-icon">{leagueIcons[league] || defaultIcon}</span>
              <span>{league === "all" ? "All" : league}</span>
              <span class="ml-1 px-1.5 py-0.5 text-xs rounded-full bg-slate-700/50">
                {leagueCounts[league]}
              </span>
            </button>
          ))}
        </div>
      </div>
    </div>
    
    <!-- Controls for bankroll and confidence -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 pt-0">
      <div class="flex items-center gap-3">
        <div class="w-full">
          <label for="bankrollInput" class="block text-xs font-medium text-slate-400 mb-1">
            Your Bankroll ($)
          </label>
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <span class="text-slate-500">$</span>
            </div>
            <input 
              type="number" 
              id="bankrollInput" 
              placeholder="Enter bankroll amount" 
              class="w-full pl-8 pr-4 py-2 bg-slate-800/60 border border-slate-700/80 rounded-lg text-slate-200 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200"
            />
          </div>
        </div>
      </div>
      <div class="flex items-center gap-3">
        <div class="w-full">
          <label for="confidenceThreshold" class="block text-xs font-medium text-slate-400 mb-1 flex justify-between">
            <span>Minimum Confidence</span>
            <span id="confidenceValue" class="text-indigo-400">0%</span>
          </label>
          <input 
            type="range" 
            id="confidenceThreshold" 
            min="0" 
            max="100" 
            step="5" 
            value="0"
            class="w-full h-2 bg-slate-700 rounded-lg appearance-none cursor-pointer accent-indigo-500"
          />
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Hide scrollbar for Chrome, Safari and Opera */
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  /* Hide scrollbar for IE, Edge and Firefox */
  .scrollbar-hide {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
  
  /* Smooth transition for active state */
  .league-filter-btn {
    position: relative;
    overflow: hidden;
  }
  
  .league-filter-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(99, 102, 241, 0.1), rgba(139, 92, 246, 0.1));
    transform: translateY(100%);
    transition: transform 0.3s ease;
    border-radius: 9999px;
    z-index: -1;
  }
  
  .league-filter-btn:hover::before {
    transform: translateY(0);
  }
  
  /* Custom range slider styling */
  input[type="range"] {
    -webkit-appearance: none;
    height: 8px;
    border-radius: 999px;
    background: linear-gradient(to right, rgba(99, 102, 241, 0.5) 0%, rgba(139, 92, 246, 0.5) 100%);
  }
  
  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: linear-gradient(to right, #6366f1, #8b5cf6);
    box-shadow: 0 0 10px rgba(99, 102, 241, 0.6);
    cursor: pointer;
  }
  
  input[type="range"]::-moz-range-thumb {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: linear-gradient(to right, #6366f1, #8b5cf6);
    box-shadow: 0 0 10px rgba(99, 102, 241, 0.6);
    cursor: pointer;
    border: none;
  }
  
  /* Animation for the league icon */
  .league-icon {
    display: inline-block;
    transform-origin: center;
    transition: transform 0.3s ease;
  }
  
  .league-filter-btn:hover .league-icon {
    transform: scale(1.2);
  }
</style>

<script>
  // Function to handle league filtering
  function handleLeagueFilter() {
    const leagueButtons = document.querySelectorAll('.league-filter-btn');
    const confidenceSlider = document.getElementById('confidenceThreshold');
    const confidenceValueDisplay = document.getElementById('confidenceValue');
    
    // Update confidence value display
    if (confidenceSlider && confidenceValueDisplay) {
      confidenceValueDisplay.textContent = `${confidenceSlider.value}%`;
      
      confidenceSlider.addEventListener('input', function() {
        confidenceValueDisplay.textContent = `${this.value}%`;
        filterMatches();
      });
    }
    
    // Add click event listeners to league buttons
    leagueButtons.forEach(button => {
      button.addEventListener('click', function() {
        // Remove active class from all buttons
        leagueButtons.forEach(btn => {
          btn.classList.remove('bg-gradient-to-r', 'from-indigo-600', 'to-purple-600', 'text-white', 'shadow-md', 'shadow-indigo-500/20');
          btn.classList.add('bg-slate-800/80', 'text-slate-300', 'hover:bg-slate-700/80');
          
          // Remove active indicator
          const indicator = btn.querySelector('span.absolute');
          if (indicator) indicator.remove();
        });
        
        // Add active class to clicked button
        this.classList.remove('bg-slate-800/80', 'text-slate-300', 'hover:bg-slate-700/80');
        this.classList.add('bg-gradient-to-r', 'from-indigo-600', 'to-purple-600', 'text-white', 'shadow-md', 'shadow-indigo-500/20');
        
        // Add active indicator
        if (!this.querySelector('span.absolute')) {
          const indicator = document.createElement('span');
          indicator.className = 'absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-1.5 h-1.5 rounded-full bg-white';
          this.appendChild(indicator);
        }
        
        // Apply filtering
        filterMatches(this.dataset.league);
      });
    });
    
    // Mobile scrolling active indicator
    const mobileLeagueContainer = document.querySelector('.md\\:hidden .flex');
    if (mobileLeagueContainer) {
      const activeButton = mobileLeagueContainer.querySelector('.league-filter-btn[data-league="all"]');
      if (activeButton) {
        // Scroll to the active button (with some offset) when page loads
        setTimeout(() => {
          activeButton.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
        }, 300);
      }
    }
  }
  
  // Combined filtering function
  function filterMatches(selectedLeague = 'all') {
    const threshold = parseFloat(document.getElementById('confidenceThreshold')?.value) || 0;
    
    document.querySelectorAll('.match-card-wrapper').forEach(matchCard => {
      // First check if the league matches
      const matchLeague = matchCard.dataset.league;
      const leagueMatch = selectedLeague === 'all' || matchLeague === selectedLeague;
      
      if (!leagueMatch) {
        matchCard.style.display = 'none';
        return;
      }
      
      // Then check confidence levels
      const statSections = matchCard.querySelectorAll('.stat-section');
      let hasVisibleStats = false;
      
      statSections.forEach(section => {
        const homeConfidence = parseFloat(section.dataset.homeConfidence);
        const awayConfidence = parseFloat(section.dataset.awayConfidence);
        
        if (homeConfidence < threshold && awayConfidence < threshold) {
          section.style.display = 'none';
        } else {
          section.style.display = 'block';
          hasVisibleStats = true;
          
          const homeStats = section.querySelector('.home-stats');
          const awayStats = section.querySelector('.away-stats');
          
          if (homeStats && awayStats) {
            homeStats.style.display = homeConfidence >= threshold ? 'block' : 'none';
            awayStats.style.display = awayConfidence >= threshold ? 'block' : 'none';
          }
        }
      });
      
      matchCard.style.display = hasVisibleStats ? 'grid' : 'none';
    });
    
    // Update league counts after filtering
    updateLeagueCounts(threshold);
  }
  
  // Update the counts displayed in the league pills based on filtering
  function updateLeagueCounts(threshold) {
    const leagueButtons = document.querySelectorAll('.league-filter-btn');
    
    leagueButtons.forEach(button => {
      const league = button.dataset.league;
      const countBadge = button.querySelector('.rounded-full');
      
      if (league === 'all') {
        const visibleCards = document.querySelectorAll('.match-card-wrapper[style="display: grid"]');
        countBadge.textContent = visibleCards.length;
      } else {
        // Count matches that match both league and confidence threshold
        let count = 0;
        document.querySelectorAll(`.match-card-wrapper[data-league="${league}"]`).forEach(matchCard => {
          const hasVisibleStats = Array.from(matchCard.querySelectorAll('.stat-section')).some(section => {
            const homeConfidence = parseFloat(section.dataset.homeConfidence);
            const awayConfidence = parseFloat(section.dataset.awayConfidence);
            return homeConfidence >= threshold || awayConfidence >= threshold;
          });
          
          if (hasVisibleStats) count++;
        });
        
        countBadge.textContent = count;
      }
    });
  }
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', () => {
    handleLeagueFilter();
    
    // Add scroll effect for sticky header
    const header = document.getElementById('leagueHeaderWrapper');
    if (header) {
      window.addEventListener('scroll', () => {
        if (window.scrollY > 20) {
          header.classList.add('shadow-xl');
        } else {
          header.classList.remove('shadow-xl');
        }
      });
    }
  });
</script>